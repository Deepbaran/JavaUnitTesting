package com.in28minutes.junit.helper;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class StringHelperParameterizedTest {
	StringHelper helper = new StringHelper();

	@Test
	public void testTruncateAInFirst2Positions_AinFirst2Positions() {
		assertEquals("CD", helper.truncateAInFirst2Positions("AACD"));
	}

	@Test
	public void testTruncateAInFirst2Positions_AinFirstPosition() {
		assertEquals("CD", helper.truncateAInFirst2Positions("ACD"));
	}
	
	@Test
	public void testAreFirstAndLastTwoCharactersTheSame_BasicNegativeScenario() {
//		assertEquals(false, helper.areFirstAndLastTwoCharactersTheSame("ABCD"));
		
//		assertFalse("test failed", helper.areFirstAndLastTwoCharactersTheSame("ABCD"));
		//str, actualValue
		//str - value that is printed when the test fails
		assertFalse(helper.areFirstAndLastTwoCharactersTheSame("ABCD"));
	}
	
	@Test
	public void testAreFirstAndLastTwoCharactersTheSame_BasicPositiveScenario() {
		assertTrue(helper.areFirstAndLastTwoCharactersTheSame("ABAB"));
	}

}

/*
 * @Test - This annotation comes from the org.junit.Test. It annotates that the following method is a specific unit test method. Make sure to give a specific name
 * to the following method so that it is clear for which method the test is going to run.
 * 
 * @Before - This annotation is used whenever we have some things to do before a test. The method under @Before will get executed before each and every test.
 * 
 * @After - This annotation is used whenever we have some things to do after a test. The method under @After will get executed after each and every test.
 * 
 * @BeforeClass - This annotation is used whenever we have some things to do before any test runs. It only runs once in the whole class. Any class implementing it must be static.
 * 
 * @AfterClass - This annotation is used whenever we have some things to do after all test has run. It only runs once in the whole class. Any class implementing it must be static.
 * 
 * fail() - It is one of the methods in a series of assert methods that JUnit provides. A fail() would normally fail a test.
 * 
 * assertEquals(expected, actual) - It checks if expected and the actual value are equal or not. The test fails if the values do not match.
 * 
 * assertTrue(str, actual) - It checks if the value of the actual is true or not. If not then the test case fails and str is shown. str is not needed in modern ide.
 * 
 * assertFalse(str, actual) - It checks if the value of the actual is false or not. If not then the test case fails and str is shown. str is not needed in modern ide.
 */